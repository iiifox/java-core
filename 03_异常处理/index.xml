<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>异常处理 on Java 核心技术</title>
    <link>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
    <description>Recent content in 异常处理 on Java 核心技术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 18 Jul 2022 17:29:38 +0800</lastBuildDate><atom:link href="https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1、异常体系结构</title>
      <link>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 18 Jul 2022 17:56:00 +0800</pubDate>
      
      <guid>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description> java.lang.Throwable java.lang.Error：一般不编写针对性的代码进行处理 java.lang.Exception：可以进行异常的处理 编译时异常(checked) IOException FileNotFoundException ClassNotFoundException 运行时异常(unchecked) NullPointerException ArrayIndexOutOfBoundsException ClassCastException NumberFormatException InputMismatchException ArithmeticException </description>
    </item>
    
    <item>
      <title>2、异常处理的方式一：try Catch Finally</title>
      <link>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%80try-catch-finally/</link>
      <pubDate>Mon, 18 Jul 2022 17:55:43 +0800</pubDate>
      
      <guid>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%80try-catch-finally/</guid>
      <description>try { //可能出现异常的代码 } catch (异常类型1 变量名1) { //处理异常的方式1 } catch (异常类型2 变量名2) { //处理异常的方式2 } catch (异常类型3 变量名3) { //处理异常的方式3 } ...... finally { //一定会执行的代码 } try-catch-finally的说明 使用try将可能出现异常代码包装起来。在执行过程之，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配 一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码 catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓；如果满足子父类关系，则要求子类一定声明在父类的上面，否则报错。 常用的异常对象处理的方式： String getMessage() printStackTrace() 在try结构中声明的变量，在出了try结构以后，就不能再被调用 try-catch-finally结构可以嵌套 try-catch-finally的体会 使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。 开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对编译时异常，我们一定要考虑异常的处理。 finally的说明 finally是可选的 finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句等情况。 像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。 </description>
    </item>
    
    <item>
      <title>3、异常处理的方式二：throws</title>
      <link>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/3%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%8Cthrows/</link>
      <pubDate>Mon, 18 Jul 2022 17:55:29 +0800</pubDate>
      
      <guid>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/3%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%8Cthrows/</guid>
      <description> &amp;ldquo;throws + 异常类型&amp;quot;写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！ try-catch-finally：真正的将异常给处理掉了；throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉。 开发中如何选择使用try-catch-finally还是使用throws？ 如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑是用try-catch-finally方式进行处理。 </description>
    </item>
    
    <item>
      <title>4、自定义异常类</title>
      <link>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</link>
      <pubDate>Mon, 18 Jul 2022 17:54:42 +0800</pubDate>
      
      <guid>https://iiifox.github.io/java-core/03_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</guid>
      <description> 继承于现有的异常结构：RuntimeException、Exception 提供全局常量：serialVersionUID 提供重载的构造器 </description>
    </item>
    
  </channel>
</rss>
